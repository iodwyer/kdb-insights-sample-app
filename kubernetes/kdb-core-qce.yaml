---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kx-data
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 100Gi
  storageClassName: azurefile-premium-kxi-nfs 
# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: kx-data
# spec:
#   accessModes:
#   - ReadWriteOnce
#   resources:
#     requests:
#       storage: 100Gi
#   storageClassName: managed-csi-premium 
---
apiVersion: v1
kind: Service
metadata:
  name: kxi-core-qce
  labels:
    app.kubernetes.io/name: kxi-core-qce
    app.kubernetes.io/instance: kx-insights
spec:
  type: ClusterIP
  ports:
    - port: 5000
      targetPort: 5000
      protocol: TCP
      name: ipc-port
  selector:
    app.kubernetes.io/name: kxi-core-qce
    app.kubernetes.io/instance: kx-insights  
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: kxi-core-qce-lb
#   labels:
#     app.kubernetes.io/name: kxi-core-qce
#     app.kubernetes.io/instance: kx-insights
# spec:
#   type: LoadBalancer
#   ports:
#     - name: ipc-port
#       protocol: TCP
#       port: 5000
#       targetPort: 5000
#   selector:
#     app.kubernetes.io/name:  kxi-core-qce
#     app.kubernetes.io/instance: kx-insights    
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: kxi-core-qce-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: kxi-core-qce
  minReplicas: 7
  maxReplicas: 10
  targetCPUUtilizationPercentage: 50
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kxi-core-qce
  labels:
    app.kubernetes.io/name: kxi-core-qce
    app.kubernetes.io/instance: kx-insights
spec:
  # replicas: 1
  serviceName: kxi-core-qce
  selector:
    matchLabels:
      app.kubernetes.io/name: kxi-core-qce
      app.kubernetes.io/instance: kx-insights
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kxi-core-qce
        app.kubernetes.io/instance: kx-insights
    spec:
      securityContext: 
        fsGroup: 65534
        # runAsUser: 65534
        # privileged: true
      imagePullSecrets:
        - name: kx-repo-access
      containers:
        - name: kxi-core-qce
          securityContext: {}         
          image: registry.dl.kx.com/qce:4.0.0
          imagePullPolicy: IfNotPresent
          workingDir: /data
          # args: [ /opt/kx/lib/custom.q, -s, "2", -p, "5000" ]
          args: [  -s, "2", -p, "5000" ]
          # args: [  /opt/kx/lib/custom.q, -run, -cleanup, -rl, /data/q_io_test, -s, "2", -p, "5000" ]
          tty: true   
          stdin: true 
          resources:
            requests:
              memory: "2Gi"
              cpu: "2"
            limits:
              memory: "4Gi"
              cpu: "4"
          env:
            - name: KDB_LICENSE_B64
              valueFrom:
                secretKeyRef:
                  name: kdb-license-info
                  key: license                      
            - name: KX_KURL_LOG_LEVEL
              value: TRACE
          ports:
            - name: ipc-port
              containerPort: 5000
              protocol: TCP
          volumeMounts:
            - name: kxi-lib
              mountPath: /opt/kx/lib/custom.q
              subPath: io.q  
            - name: kx-data-pvc
              mountPath: /data     
      volumes:                  
      - name: kxi-lib
        configMap:
          name: kxi-custom-file-configmap  
      - name: kx-data-pvc
        persistentVolumeClaim:
          claimName: kx-data   
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kxi-custom-file-configmap 
data:
  # feed.q: |-
  #   show "loading feed.q"  
  # tp.q:   |-
  #   show "loading tp.q"       
  # rdb.q:  |-
  #   show "loading rdb.q"
  #   \t 1000
  #   .z.ts{-1 "Running"}     
  io.q:  |-
    STDOUT:-1
    if[0=count .z.x;STDOUT">q ",(string .z.f)," -prepare -run -flush memsizeGB -cleanup -rh host:port -rl remotelocation";exit 1]
    argvk:key argv:.Q.opt .z.x
    PREPARE:`prepare in argvk
    CLEANUP:`cleanup in argvk
    FLUSH:`flush in argvk
    RUN:`run in argvk
    RH:`rh in argvk 
    RL:`rl in argvk

    lh:`$":127.0.0.1:",string localport:5555
    LH:not 0=@[hopen;lh;0]

    ffile:`:file.test / local fileops test
    rrfile:lrfile:`:read.test / local read file
    rwfile:lwfile:`:write.test / local write file
    if[RL;
      rrfile:` sv(hsym`$first argv`rl),`read.test;
      rwfile:` sv(hsym`$first argv`rl),`write.test;
      ]
    msstring:{(string x)," ms"}

    SAMPLESIZE:5000000
    ssm:floor 4*SAMPLESIZE%1e6
    read:{[file]
      STDOUT"hclose hopen`",(string file)," ",msstring 0.0001*value"\\t do[10000;hclose hopen`",(string file),"]";
      STDOUT"read `",(string file)," - ",(string floor 0.5+1000*ssm%value"\\t read1`",string file)," MB/sec";
      STDOUT"read `",(string file)," - ",(string floor 0.5+1000*ssm%value"\\t read1`",string file)," MB/sec (cached)";}
    write:{[file]STDOUT"write `",(string file)," - ",(string floor 0.5+1000*ssm%value "\\t `",(string file)," 1:SAMPLESIZE#`int$key 11+rand 111")," MB/sec";hdel file;}

    fileops:{sx:string x;
      STDOUT".[`",sx,";();,;2 3i] ",msstring 0.001*value"\\t do[1000;.[`",sx,";();,;2 3i]]";
      STDOUT".[`",sx,";();:;2 3i] ",msstring 0.001*value"\\t do[1000;.[`",sx,";();:;2 3i]]";
      H::hopen x;
      STDOUT"append (2 3i) to handle ",msstring 0.00001*value"\\t do[100000;H(2 3i)]";
      STDOUT"hcount`",sx," ",msstring 0.00001*value"\\t do[100000;hcount`",sx,"]";
      STDOUT"read1`",sx," ",msstring 0.0001*value"\\t do[10000;read1`",sx,"]";
      STDOUT"value`",sx," ",msstring 0.0001*value"\\t do[10000;value`",sx,"]";
      }

    comm:{sx:string x;
      STDOUT"hclose hopen`",sx," ",msstring 0.001*value"\\t do[1000;hclose hopen`",sx,"]";
      H::hopen x;
      STDOUT"sync (key rand 100) ",msstring 0.00001*value"\\t do[100000;H\"key rand 100\"]";
      STDOUT"async (string 23);collect ",msstring 0.00001*value"\\t do[100000;(neg H)\"23\"];H\"23\"";
      STDOUT"sync (string 23) ",msstring 0.00001*value"\\t do[100000;H\"23\"]"}

    if[PREPARE;
      / prepare files for read, then do something else for a while to get them out of the cache
      if[RL;t:rrfile 1:SAMPLESIZE#`int$key 11+rand 111];
      t:lrfile 1:SAMPLESIZE#`int$key 11+rand 111;
      t:.[ffile;();:;2 3i];
      STDOUT"start local q server with: q -p ",string localport;
      / value"\\start \"hardware test\" q -p ",string localport;
      STDOUT"tmpfiles created"]

    if[FLUSH;
      STDOUT"memory flushed (",$[count mem:first argv`flush;mem;"1"],"GB)";
      stuff:1+(floor 0.5+1^first"E"$first argv`flush)#enlist 125000000#999i;stuff:()]

    if[RUN;
      STDOUT(string .z.f)," - ",(string `date$.z.Z)," ",(string `minute$.z.Z)," ",(string .z.h)," - times in ms for single execution";
      STDOUT"* local file";read[lrfile];write[lwfile];
      STDOUT"* local fileops";fileops[ffile];
      if[LH;STDOUT"* local comm";comm[lh]];
      if[RL;STDOUT"* remote file";read[rrfile];write[rwfile]];		
      if[RH;STDOUT"* remote comm";comm[hsym `$first argv`rh]]] 

    if[CLEANUP;
      @[hdel;lrfile;()];@[hdel;ffile;()];
      if[RL;@[hdel;rrfile;()]];
      STDOUT"tmpfiles deleted"]